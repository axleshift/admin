import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define the base API with RTK Query
export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_APP_BASE_URL }),
  reducerPath: "adminApi",
  tagTypes: ["User", "Products", "Customers", "Workers", "Freight", "Employees", "Logistics","ActivityLogs"],
  endpoints: (build) => ({
    // Fetch user data by ID
    getUser: build.query({
      query: (id) => `general/user/${id}`,
      providesTags: ["User"],
    }),
    // Fetch all products
    getProducts: build.query({
      query: () => `client/products`,
      providesTags: ["Products"],
    }),
    // Fetch all customers
    getCustomers: build.query({
      query: () => `client/customers/`,
      providesTags: ["Customers"],
    }),
    // Fetch all workers
    getWorkers: build.query({
      query: () => `client/worker/`,
      providesTags: ["Workers"],
    }),


    getPerformance: build.query({
      query: () => 'client/performance',
    }),

    // Change role of a worker
    changeRole: build.mutation({
      query: ({ userId, newRole }) => ({
        url: `client/worker/${userId}/role`,
        method: "PUT",
        body: { newRole },
      }),
      invalidatesTags: ["Workers"],
    }),
    // Fire (delete) a user
    fireUser: build.mutation({
      query: ({ userId }) => ({
        url: `client/worker/${userId}`,
        method: "DELETE",
      }),
      invalidatesTags: ["Workers"],
    }),
    // Fetch shipping data with optional parameters
    getShipping: build.query({
      query: (params) => {
        const { customerId, product } = params || {};
        return `sales/shipping${
          customerId || product ? `?customerId=${customerId}&product=${product}` : ''
        }`;
      },
      providesTags: ["Shipping"],
    }),
    // Create new shipping entry
    createShipping: build.mutation({
      query: (newShipping) => ({
        url: `sales/shipping`,
        method: "POST",
        body: newShipping,
      }),
      invalidatesTags: ["Shipping"],
    }),
    // Update a shipping entry
    updateShipping: build.mutation({
      query: ({ id, ...shipping }) => ({
        url: `sales/shipping/${id}`, // Correct endpoint for updating
        method: "PATCH",
        body: shipping,
      }),
      invalidatesTags: ["Shipping"], // Invalidate shipping tag to refetch data
    }),
    // Delete a shipping entry
    deleteShipping: build.mutation({
      query: (id) => ({
        url: `sales/shipping/${id}`, // Correct endpoint for deleting
        method: "DELETE",
      }),
      invalidatesTags: ["Shipping"], // Invalidate shipping tag to refetch data
    }),

    // Update user details
    updateUser: build.mutation({
      query: ({ id, ...userDetails }) => ({
        url: `general/user/${id}`,
        method: "PUT",
        body: userDetails,
      }),
      invalidatesTags: ["User"],
    }),


    // // Fetch all employees
    // getEmployees: build.query({
    //   query: () => 'hr1/employee',
    //   providesTags: ["Employees"],
    // }),
    // // Fetch performance report
    // getPerformanceReport: build.query({
    //   query: () => 'hr1/report/performance',
    //   providesTags: ["Employees"],
    // }),
    // // Fetch attendance report
    // getAttendanceReport: build.query({
    //   query: () => 'hr1/report/attendance',
    //   providesTags: ["Employees"],
    // }),



   // Logistics queries and mutations
   getLogistics: build.query({
    query: () => 'logix/logistic',  // Fetch all logistics
    providesTags: ['Logistics'],
  }),
  getLogisticsById: build.query({
    query: (id) => `logix/logistic/${id}`, // Fetch logistics by ID
    providesTags: ['Logistics'],
  }),
  getLogisticsByTrackingNum: build.query({
    query: (trackingNumber) => ({
      url: `logix/logistic/track`, // Fetch logistics by tracking number
      method: 'POST',
      body: { trackingNumber },
    }),
    providesTags: ['Logistics'],
  }),
  updateLogistics: build.mutation({
    query: ({ id, currentLocation }) => ({
      url: `logix/logistic/${id}`, // Update logistics
      method: "PUT",
      body: { currentLocation },
    }),
    invalidatesTags: ["Logistics"],
  }),
  deleteLogistics: build.mutation({
    query: (id) => ({
      url: `logix/logistic/${id}`, // Delete logistics
      method: "DELETE",
    }),
    invalidatesTags: ["Logistics"],
  }),
  }),
});

// Export the hooks generated by RTK Query
export const {
  useGetUserQuery,
  useGetProductsQuery,
  useGetCustomersQuery,

  useGetWorkersQuery,
  useGetPerformanceQuery,

  useChangeRoleMutation,
  useFireUserMutation,
  useGetShippingQuery,
  useCreateShippingMutation,
  useUpdateShippingMutation,
  useDeleteShippingMutation,
  useUpdateUserMutation,


  // useGetEmployeesQuery,
  // useGetPerformanceReportQuery,
  // useGetAttendanceReportQuery,



  useGetLogisticsQuery,
  useGetLogisticsByIdQuery,
  useGetLogisticsByTrackingNumQuery,
  useUpdateLogisticsMutation,
  useDeleteLogisticsMutation,
} = api;